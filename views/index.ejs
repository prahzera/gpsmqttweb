<!DOCTYPE html>
<html>
<head>
  <title>Mapa en Tiempo Real</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <style>
    #map { height: 600px; width: 100%; }
    .controls { margin: 10px; }
  </style>
</head>
<body>
  <div class="controls">
    <label for="timeRange">Ver historial de:</label>
    <select id="timeRange">
      <option value="5">Últimos 5 minutos</option>
      <option value="10">Últimos 10 minutos</option>
      <option value="60">Última hora</option>
      <option value="180">Últimas 3 horas</option>
      <option value="720">Últimas 12 horas</option>
      <option value="1440">Último día</option>
    </select>
  </div>
  <div id="map"></div>
  
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const map = L.map('map').setView([0, 0], 16);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
    }).addTo(map);

    const customIcon = L.icon({
      iconUrl: '/images/icon32.png',
      iconSize: [38, 38],
      iconAnchor: [19, 38],
      popupAnchor: [0, -38]
    });

    const marker = L.marker([0, 0], { icon: customIcon }).addTo(map);
    const socket = io();
    let routeLayer = L.layerGroup().addTo(map); // Usar LayerGroup para mantener la ruta
    let lastCoords = { lat: null, lon: null }; // Para almacenar la última coordenada completa

    // Función para dibujar la ruta en el mapa
    const drawRoute = (coords) => {
      routeLayer.clearLayers(); // Limpia la capa antes de agregar nueva ruta
      const latlngs = coords.map(coord => [coord.lat, coord.lon]);
      L.polyline(latlngs, { color: 'red', weight: 3 }).addTo(routeLayer);
    };

    // Función para solicitar y mostrar el historial basado en el intervalo seleccionado
    const updateRoute = (minutes) => {
      fetch(`/route/${minutes}`)
        .then(response => response.json())
        .then(data => drawRoute(data));
    };

    // Obtiene la última ubicación al cargar la página
    fetch('/last-location')
      .then(response => response.json())
      .then(data => {
        if (data.lat && data.lon) {
          map.setView([data.lat, data.lon], 16);
          marker.setLatLng([data.lat, data.lon]);
        }
      });

    // Solicita la ruta de las últimas X minutos (por ejemplo, 24 horas) y dibuja
    updateRoute(1440); // Inicialmente muestra el historial del último día

    // Escucha las nuevas coordenadas del servidor
    socket.on('coordinates', (coord) => {
      // Actualiza la última coordenada completa
      if (lastCoords.lat !== null && lastCoords.lon !== null) {
        marker.setLatLng([coord.lat, coord.lon]);
        map.setView([coord.lat, coord.lon]);

        // Actualizar el historial en el mapa con el intervalo actual
        const timeRange = document.getElementById('timeRange').value;
        updateRoute(timeRange);
      }
      lastCoords = { lat: coord.lat, lon: coord.lon }; // Almacena la coordenada actual
    });

    // Maneja el cambio en la selección del intervalo de tiempo
    document.getElementById('timeRange').addEventListener('change', (event) => {
      const minutes = event.target.value;
      updateRoute(minutes);
    });
  </script>
</body>
</html>
